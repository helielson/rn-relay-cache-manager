{"version":3,"sources":["../../src/CacheRecordStore.js"],"names":["GraphQLRange","CacheRecordStore","constructor","records","rootCallMap","updateRecords","writeRootCall","storageKey","identifyingArgValue","dataId","writeRecord","record","getDataIdFromRootCallName","callName","callValue","readNode","dataID","fromJSON","key","range","__range__"],"mappings":"AAAA;;;;;;AAMA,OAAOA,YAAP,MAAyB,8BAAzB;;AAGA;;;;;;;;;;AAgDA,eAAe,MAAMC,gBAAN,CAAuB;AAGpCC,cACEC,OADF,EAEEC,WAFF,EAGE;AACA,SAAKD,OAAL,GAAeA,WAAW,EAA1B;AACA,SAAKC,WAAL,GAAmBA,eAAe,EAAlC;AACD;;AAEDC,gBAAcF,OAAd,EAAuCC,WAAvC,EAAsE;AACpE,SAAKD,OAAL,GAAeA,OAAf;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACD;;AAEDE,gBACEC,UADF,EAEEC,mBAFF,EAGEC,MAHF,EAIE;AACA,SAAKL,WAAL,CAAiBG,UAAjB,IAA+BE,MAA/B;AACD;;AAEDC,cACED,MADF,EAEEE,MAFF,EAGE;AACA,SAAKR,OAAL,CAAaM,MAAb,IAAuBE,MAAvB;AACD;;AAEDC,4BACEC,QADF,EAEEC,SAFF,CAEoB;AAFpB,IAGW;AACT,WAAO,KAAKV,WAAL,CAAiBS,QAAjB,CAAP;AACD;;AAEDE,WAASC,MAAT,EAAuC;AACrC,WAAO,KAAKb,OAAL,CAAaa,MAAb,KAAwB,IAA/B;AACD;;AAED;;;;;;AAMA,SAAOC,QAAP,CAAgB,EAAEd,OAAF,EAAWC,WAAX,EAAhB,EAA0C;AACxC,SAAK,IAAIc,GAAT,IAAgBf,OAAhB,EAAyB;AACvB,YAAMQ,SAASR,QAAQe,GAAR,CAAf;AACA,YAAMC,QAAQR,OAAOS,SAArB;AACA,UAAID,KAAJ,EAAW;AACTR,eAAOS,SAAP,GAAmBpB,aAAaiB,QAAb,CAAsBE,KAAtB,CAAnB;AACD;AACD;AACF,WAAO,IAAIlB,gBAAJ,CAAqBE,OAArB,EAA8BC,WAA9B,CAAP;AACD;AAzDmC","file":"CacheRecordStore.js","sourcesContent":["/**\n * Manages all cached records, including read/write and\n * deserialization.\n * @flow\n */\n\nimport GraphQLRange from 'react-relay/lib/GraphQLRange';\n\n\n/**\n * These types are being copied from RelayInternalTypes.\n * Relay does not currently offer a way to use internal\n * type definitions. Since this library is essentially\n * mimicking internal data structures, we just copy what we\n * need manually until a better solution presents itself.\n *\n * https://github.com/facebook/relay/blob/master/src/tools/RelayInternals.js\n */\n\ntype CallValue = ?(\n  boolean |\n  number |\n  string |\n  {[key: string]: CallValue} |\n  Array<CallValue>\n);\n\ntype Call = {\n  name: string,\n  type?: string,\n  value: CallValue,\n};\n\nexport type CacheRecord = {\n  [key: string]: mixed;\n  __dataID__: string,\n  __filterCalls__?: Array<Call>,\n  __forceIndex__?: number,\n  __mutationIDs__?: Array<string>,\n  __mutationStatus__?: string,\n  __path__?: Object,\n  __range__?: GraphQLRange,\n  __resolvedDeferredFragments__?: {[fragmentID: string]: boolean},\n  __resolvedFragmentMapGeneration__?: number,\n  __resolvedFragmentMap__?: {[fragmentID: string]: boolean},\n  __status__?: number,\n  __typename?: ?string,\n};\n\nexport type CacheRecordMap = {\n  [dataId: string]: CacheRecord,\n}\n\nexport type CacheRootCallMap = {\n  [root: string]: string,\n}\n\nexport default class CacheRecordStore {\n  records: CacheRecordMap;\n  rootCallMap: CacheRootCallMap;\n  constructor(\n    records?: CacheRecordMap,\n    rootCallMap?: CacheRootCallMap\n  ) {\n    this.records = records || {};\n    this.rootCallMap = rootCallMap || {};\n  }\n\n  updateRecords(records: CacheRecordMap, rootCallMap: CacheRootCallMap) {\n    this.records = records;\n    this.rootCallMap = rootCallMap;\n  }\n\n  writeRootCall(\n    storageKey: string,\n    identifyingArgValue: string,\n    dataId: string\n  ) {\n    this.rootCallMap[storageKey] = dataId;\n  }\n\n  writeRecord(\n    dataId: string,\n    record: CacheRecord\n  ) {\n    this.records[dataId] = record;\n  }\n\n  getDataIdFromRootCallName(\n    callName: string,\n    callValue: string // eslint-disable-line no-unused-vars\n  ): ?string {\n    return this.rootCallMap[callName];\n  }\n\n  readNode(dataID: string): ?CacheRecord {\n    return this.records[dataID] || null;\n  }\n\n  /**\n   * Takes an object that represents a partially\n   * deserialized instance of CacheRecordStore\n   * and creates a new instance from it. This is required\n   * so that __range__ values can be correctly restored.\n   */\n  static fromJSON({ records, rootCallMap }) {\n    for (var key in records) {\n      const record = records[key];\n      const range = record.__range__;\n      if (range) {\n        record.__range__ = GraphQLRange.fromJSON(range)\n      }\n     }\n    return new CacheRecordStore(records, rootCallMap);\n  }\n}\n"]}